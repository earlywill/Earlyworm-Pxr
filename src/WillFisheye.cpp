/*
# ------------------------------------------------------------------------------
#
# Copyright (c) 1986-2018 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# ------------------------------------------------------------------------------
*/

#include "RixProjection.h"
#include "RixIntegrator.h"
#include "RixInterfaces.h"

#include <algorithm>
#include <cstring>

const static RtUString US_FOV("fieldOfView");

class WillFisheye : public RixProjection
{
public:

    WillFisheye(
        RixContext& ctx,
        RtUString const handle,
        RixParameterList const* parm);
    
    ~WillFisheye() override;

    void RenderBegin(RixContext& ctx, RixProjectionEnvironment const& env,
                 RixParameterList const* parm) override;

    RixSCDetail GetProperty(
        ProjectionProperty property,
        void const** result) const override
    {
        switch (property)
        {
            case k_DicingHint:
                *result = &dicingHint;
                return k_RixSCUniform;
                break;
            case k_FieldOfView:
                *result = &fieldOfView;
                return k_RixSCUniform;
                break;
            default:
                return k_RixSCInvalidDetail;
        }
    }
    
    void Project(RixProjectionContext& pCtx) override;

private:

    DicingHint const dicingHint;
    RtFloat const fovHint;
    RtUString m_handle;
    RtFloat xyStep;
    RtFloat spread;
    RtFloat fieldOfView;
};


WillFisheye::WillFisheye(
    RixContext& ctx,
    RtUString const handle,
    RixParameterList const* params)
    : dicingHint(k_Spherical),
      fovHint(170.0f),
      m_handle(handle)
{
    PIXAR_ARGUSED(ctx);
    PIXAR_ARGUSED(params);
}

void WillActionCam::RenderBegin(
    RixContext& ctx,
    RixProjectionEnvironment const& env,
    RixParameterList const* parms)
{
    PIXAR_ARGUSED(ctx);
    PIXAR_ARGUSED(parms);

    float screenWidth = env.screenWindowRight - env.screenWindowLeft;
    float screenHeight = env.screenWindowTop - env.screenWindowBottom;
    if ( screenWidth == 0.0f || screenHeight == 0.0f )
    {
        float aspect = env.width * env.pixelAspectRatio / env.height;
        screenWidth = std::max( 2.0f, 2.0f * aspect );
        screenHeight = std::max( 2.0f, 2.0f / aspect );
    }
    
    fieldOfView = 180.0f;
    
    RtInt paramId;
    if ( parms->GetParamId(US_FOV, &paramId ) == 0 )
        parms->EvalParam( paramId, 0, &fieldOfView );
    
    float xStep = 0.25f * screenWidth / env.width;
    float yStep = 0.25f * screenHeight / env.height;
    xyStep = std::max( xStep, yStep );
    spread =  2.0f * (F_PI * 0.5) * xyStep;

    env.deepMetric = RixProjectionEnvironment::k_rayLength;
}

WillFisheye::~WillFisheye()
{
}


void WillFisheye::Project(RixProjectionContext& pCtx)
{
    for ( int index = 0; index < pCtx.numRays; ++index )
    {
        RtPoint2 const& screen( pCtx.screen[ index ] );
        RtRayGeometry &ray( pCtx.rays[ index ] );
        
        ray.origin = RtFloat3( 0.0f, 0.0f, 0.0f );
        ray.originRadius = 0.0f;
        
        float phi = atan2 (screen.y, screen.x);
        float r = sqrtf(screen.x * screen.x + screen.y * screen.y);
        float maxFOV = fieldOfView * F_PI / 180.0;
        float theta = r * (maxFOV/2.0);
        
        if (r < 0.0f)
        {
            ray.direction = RtFloat3( 0.0f, 0.0f, 0.0f );
            continue;
        }
        
        ray.direction = RtFloat3(
            sin(theta) * cos(phi),
            sin(theta) * sin(phi),
            cos(theta));

        ray.raySpread = spread;
        
    }
}

// ===============================================================

class WillFisheyeFactory : public RixProjectionFactory
{
public:

    WillFisheyeFactory() {};

    int Init(RixContext& ctx, RtUString const pluginPath) override
    {
        PIXAR_ARGUSED(ctx);
        PIXAR_ARGUSED(pluginPath);

        return 0;
    }

    void Finalize(RixContext& ctx) override
    {
        PIXAR_ARGUSED(ctx);
    }

    RixSCParamInfo const* GetParamTable() override;

    void Synchronize(
        RixContext&,
        RixSCSyncMsg,
        RixParameterList const*) override
    {
    }

    RixProjection* CreateProjection(
        RixContext& ctx,
        RtUString const handle,
        RixParameterList const* pList) override;

    void DestroyProjection(RixProjection const* projection) override;
};


RixSCParamInfo const* WillFisheyeFactory::GetParamTable()
{
    static RixSCParamInfo s_ptable[] =
    {
        // orthographic camera has no parameters
        RixSCParamInfo() // end of table
    };
    return &s_ptable[ 0 ];
}

RixProjection* WillFisheyeFactory::CreateProjection(
    RixContext& ctx,
    RtUString const handle,
    RixParameterList const* pList)
{
    return new WillFisheye(ctx, handle, pList);
}

void WillFisheyeFactory::DestroyProjection(RixProjection const* projection)
{
    delete (WillFisheye*)projection;
}

RIX_PROJECTIONFACTORYCREATE
{
    PIXAR_ARGUSED(hint);
    return new WillFisheyeFactory();
}

RIX_PROJECTIONFACTORYDESTROY
{
    delete reinterpret_cast< WillFisheyeFactory * >( factory );
}
